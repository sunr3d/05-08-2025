// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/sunr3d/05-08-2025/models"
)

// ArchiveService is an autogenerated mock type for the ArchiveService type
type ArchiveService struct {
	mock.Mock
}

// AddFile provides a mock function with given fields: ctx, archiveID, fileURL
func (_m *ArchiveService) AddFile(ctx context.Context, archiveID string, fileURL string) error {
	ret := _m.Called(ctx, archiveID, fileURL)

	if len(ret) == 0 {
		panic("no return value specified for AddFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, archiveID, fileURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateArchive provides a mock function with given fields: ctx, urls
func (_m *ArchiveService) CreateArchive(ctx context.Context, urls []string) (*models.Archive, error) {
	ret := _m.Called(ctx, urls)

	if len(ret) == 0 {
		panic("no return value specified for CreateArchive")
	}

	var r0 *models.Archive
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (*models.Archive, error)); ok {
		return rf(ctx, urls)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) *models.Archive); ok {
		r0 = rf(ctx, urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Archive)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, urls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmptyArchive provides a mock function with given fields: ctx
func (_m *ArchiveService) CreateEmptyArchive(ctx context.Context) (*models.Archive, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmptyArchive")
	}

	var r0 *models.Archive
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Archive, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Archive); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Archive)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchive provides a mock function with given fields: ctx, archiveID
func (_m *ArchiveService) GetArchive(ctx context.Context, archiveID string) (*models.Archive, error) {
	ret := _m.Called(ctx, archiveID)

	if len(ret) == 0 {
		panic("no return value specified for GetArchive")
	}

	var r0 *models.Archive
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Archive, error)); ok {
		return rf(ctx, archiveID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Archive); ok {
		r0 = rf(ctx, archiveID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Archive)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, archiveID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArchiveService creates a new instance of ArchiveService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArchiveService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArchiveService {
	mock := &ArchiveService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
